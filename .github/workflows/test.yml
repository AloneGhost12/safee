name: 🧪 Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 6 AM UTC
    - cron: '0 6 * * *'

env:
  NODE_VERSION: '18'
  MONGODB_URI: 'mongodb://localhost:27017/vault-test'
  JWT_SECRET: 'test-jwt-secret-for-ci'
  NODE_ENV: 'test'

jobs:
  # Job 1: Unit Tests (Server)
  unit-tests-server:
    name: 🔧 Server Unit Tests
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd mongo
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: 📁 Checkout Repository
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            server/package-lock.json

      - name: 📥 Install Server Dependencies
        working-directory: ./server
        run: npm ci

      - name: 🔍 Lint Server Code
        working-directory: ./server
        run: npm run lint

      - name: 🔒 Security Audit
        working-directory: ./server
        run: npm audit --audit-level moderate

      - name: 🧪 Run Unit Tests
        working-directory: ./server
        run: npm run test:unit
        env:
          MONGODB_URI: ${{ env.MONGODB_URI }}
          JWT_SECRET: ${{ env.JWT_SECRET }}

      - name: 📊 Upload Server Coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./server/coverage/lcov.info
          flags: server
          name: server-coverage

  # Job 2: Unit Tests (Client)
  unit-tests-client:
    name: 🖥️ Client Unit Tests
    runs-on: ubuntu-latest

    steps:
      - name: 📁 Checkout Repository
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            client/package-lock.json

      - name: 📥 Install Client Dependencies
        working-directory: ./client
        run: npm ci

      - name: 🔍 Lint Client Code
        working-directory: ./client
        run: npm run lint

      - name: 🔒 Security Audit
        working-directory: ./client
        run: npm audit --audit-level moderate

      - name: 🧪 Run Unit Tests
        working-directory: ./client
        run: npm run test:unit

      - name: 🏗️ Build Client
        working-directory: ./client
        run: npm run build

      - name: 📊 Upload Client Coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./client/coverage/lcov.info
          flags: client
          name: client-coverage

  # Job 3: End-to-End Tests
  e2e-tests:
    name: 🌐 E2E Tests
    runs-on: ubuntu-latest
    needs: [unit-tests-server, unit-tests-client]
    
    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd mongo
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: 📁 Checkout Repository
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            server/package-lock.json
            client/package-lock.json

      - name: 📥 Install Dependencies
        run: |
          cd server && npm ci
          cd ../client && npm ci

      - name: 🎭 Install Playwright Browsers
        working-directory: ./client
        run: npx playwright install --with-deps

      - name: 🚀 Start Application Stack
        run: |
          cd server && npm run dev &
          cd client && npm run dev &
          sleep 30  # Wait for servers to start
        env:
          MONGODB_URI: ${{ env.MONGODB_URI }}
          JWT_SECRET: ${{ env.JWT_SECRET }}
          NODE_ENV: development

      - name: 🏥 Health Check
        run: |
          curl --retry 10 --retry-delay 3 --retry-connrefused http://localhost:3000/health
          curl --retry 10 --retry-delay 3 --retry-connrefused http://localhost:5173

      - name: 🧪 Run E2E Tests
        working-directory: ./client
        run: npm run test:e2e
        env:
          BASE_URL: http://localhost:5173

      - name: 📊 Upload E2E Test Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: client/playwright-report/
          retention-days: 30

      - name: 📹 Upload E2E Videos
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: playwright-videos
          path: client/test-results/
          retention-days: 30

  # Job 4: Security Tests
  security-tests:
    name: 🔒 Security Tests
    runs-on: ubuntu-latest
    needs: [unit-tests-server, unit-tests-client]

    steps:
      - name: 📁 Checkout Repository
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            server/package-lock.json
            client/package-lock.json

      - name: 📥 Install Dependencies
        run: |
          cd server && npm ci
          cd ../client && npm ci

      - name: 🔍 Run Security Validation
        working-directory: ./server
        run: npm run security:check

      - name: 🛡️ Dependency Security Scan
        run: |
          cd server && npm audit --audit-level moderate
          cd ../client && npm audit --audit-level moderate

      - name: 📝 OWASP ZAP Baseline Scan
        if: github.event_name != 'schedule'  # Skip on scheduled runs
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: 'http://localhost:5173'
          cmd_options: '-a -j -m 2 -T 5'

  # Job 5: Performance Tests
  performance-tests:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: 📁 Checkout Repository
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            client/package-lock.json

      - name: 📥 Install Dependencies
        working-directory: ./client
        run: npm ci

      - name: 🏗️ Build for Performance Testing
        working-directory: ./client
        run: npm run build

      - name: 📊 Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: './client/.lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true

  # Job 6: Build and Deploy (Staging)
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [e2e-tests, security-tests]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging

    steps:
      - name: 📁 Checkout Repository
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🏗️ Build Application
        run: |
          cd server && npm ci && npm run build
          cd ../client && npm ci && npm run build

      - name: 🚀 Deploy to Staging
        run: echo "Deploy to staging environment"
        # Add your deployment commands here

  # Job 7: Build and Deploy (Production)
  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: [e2e-tests, security-tests, performance-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
      - name: 📁 Checkout Repository
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🏗️ Build Application
        run: |
          cd server && npm ci && npm run build
          cd ../client && npm ci && npm run build

      - name: 🔒 Run Final Security Check
        working-directory: ./server
        run: npm run security:check

      - name: 🌟 Deploy to Production
        run: echo "Deploy to production environment"
        # Add your production deployment commands here

  # Job 8: Notification
  notify:
    name: 📢 Notify Results
    runs-on: ubuntu-latest
    needs: [unit-tests-server, unit-tests-client, e2e-tests, security-tests]
    if: always()

    steps:
      - name: 📢 Notify Success
        if: ${{ needs.unit-tests-server.result == 'success' && needs.unit-tests-client.result == 'success' && needs.e2e-tests.result == 'success' && needs.security-tests.result == 'success' }}
        run: echo "✅ All tests passed successfully!"

      - name: 📢 Notify Failure
        if: ${{ needs.unit-tests-server.result == 'failure' || needs.unit-tests-client.result == 'failure' || needs.e2e-tests.result == 'failure' || needs.security-tests.result == 'failure' }}
        run: echo "❌ Some tests failed. Please check the logs."
